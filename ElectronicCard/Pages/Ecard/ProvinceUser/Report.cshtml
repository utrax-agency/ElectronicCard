@page "{id:int}"
@model ElectronicCard.Pages.Ecard.ProvinceUser.Report.GroupPerformanceModel
@{
    ViewData["Title"] = $"Performance Report - {Model.Group?.Group_Name}";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            background-color: #f0f2f5;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        .report-header {
            background: linear-gradient(135deg, #2196f3 0%, #1976d2 100%);
            color: white;
            padding: 2rem;
            border-radius: 10px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .stats-card {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            transition: transform 0.3s ease;
        }

            .stats-card:hover {
                transform: translateY(-5px);
            }

        .metric-value {
            font-size: 2rem;
            font-weight: bold;
            color: #1976d2;
        }

        .metric-label {
            color: #616161;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .chart-container {
            background: white;
            border-radius: 10px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .btn-custom {
            background: linear-gradient(135deg, #1976d2 0%, #1565c0 100%);
            color: white;
            border: none;
            padding: 0.5rem 1.5rem;
            border-radius: 25px;
            transition: all 0.3s ease;
        }

            .btn-custom:hover {
                background: linear-gradient(135deg, #1565c0 0%, #0d47a1 100%);
                color: white;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            }

        .trend-indicator-up {
            color: #4caf50;
        }

        .trend-indicator-down {
            color: #f44336;
        }
    </style>
</head>
<body class="py-4">
    <div class="container">
        <div class="report-header text-center">
            <h1 class="display-4 mb-2">@Model.Group?.Group_Name</h1>
            <p class="lead mb-0">Performance Report</p>
            <p class="mb-0">Generated on @DateTime.Now.ToString("MMMM dd, yyyy")</p>
        </div>

        <div class="row g-4 mb-4">
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="metric-value">@Model.TotalMembers</div>
                    <div class="metric-label">Total Members</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="metric-value">$@Model.TotalSavings.ToString("N0")</div>
                    <div class="metric-label">Total Savings</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="metric-value">$@Model.AverageSavingsPerMember.ToString("N0")</div>
                    <div class="metric-label">Avg. Savings per Member</div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="stats-card text-center">
                    <div class="metric-value">
                        @{
                            var lastMonth = Model.MonthlySavings.LastOrDefault();
                            var previousMonth = Model.MonthlySavings.Skip(Model.MonthlySavings.Count - 2).FirstOrDefault();
                            var trend = lastMonth.Value > previousMonth.Value;
                        }
                        <i class="bi @(trend ? "bi-arrow-up-circle-fill trend-indicator-up" : "bi-arrow-down-circle-fill trend-indicator-down")"></i>
                        @(trend ? "+" : "-")@(Math.Abs(lastMonth.Value - previousMonth.Value).ToString("N0"))
                    </div>
                    <div class="metric-label">Monthly Growth</div>
                </div>
            </div>
        </div>

        <!-- Distribution Breakdown Card -->
        <div class="col-md-12 mb-4">
            <div class="stats-card">
                <h5 class="mb-3">Savings Distribution Breakdown</h5>
                <div class="row">
                    <div class="col-md-4 text-center">
                        <div class="metric-value" style="color: #4caf50">
                            @Model.SavingsDistribution["High Savers"]
                        </div>
                        <div class="metric-label">High Savers</div>
                    </div>
                    <div class="col-md-4 text-center">
                        <div class="metric-value" style="color: #2196f3">
                            @Model.SavingsDistribution["Medium Savers"]
                        </div>
                        <div class="metric-label">Medium Savers</div>
                    </div>
                    <div class="col-md-4 text-center">
                        <div class="metric-value" style="color: #ff9800">
                            @Model.SavingsDistribution["Low Savers"]
                        </div>
                        <div class="metric-label">Low Savers</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="chart-container">
                    <h4>Monthly Savings Trend</h4>
                    <canvas id="monthlySavingsChart"></canvas>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-container">
                    <h4>Savings Distribution</h4>
                    <canvas id="savingsDistributionChart"></canvas>
                </div>
            </div>
        </div>

        <div class="chart-container mt-4">
            <h4>Monthly Savings Breakdown</h4>
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Month</th>
                            <th>Total Savings</th>
                            <th>Growth</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            var monthlyData = Model.MonthlySavings.OrderByDescending(m => DateTime.ParseExact(m.Key, "MMM yyyy", null));
                        }
                        @foreach (var month in monthlyData)
                        {
                            <tr>
                                <td>@month.Key</td>
                                <td>$@month.Value.ToString("N0")</td>
                                <td>
                                    @{
                                        var prevMonth = monthlyData.SkipWhile(m => m.Key != month.Key).Skip(1).FirstOrDefault();
                                        if (prevMonth.Key != null)
                                        {
                                            var growth = ((month.Value - prevMonth.Value) / (float)prevMonth.Value) * 100;
                                            var growthClass = growth >= 0 ? "trend-indicator-up" : "trend-indicator-down";
                                            <span class="@growthClass">
                                                <i class="bi @(growth >= 0 ? "bi-arrow-up" : "bi-arrow-down")"></i>
                                                @Math.Abs(growth).ToString("N1")%
                                            </span>
                                        }
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="text-center mt-4">
            <a href="javascript:history.back()" class="btn btn-custom">
                <i class="bi bi-arrow-left me-2"></i>Back to Dashboard
            </a>
        </div>
    </div>

    <script>
        // Monthly Savings Chart
        const monthlyData = @Json.Serialize(Model.MonthlySavings);
        const ctx = document.getElementById('monthlySavingsChart').getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: Object.keys(monthlyData),
                datasets: [{
                    label: 'Monthly Savings',
                    data: Object.values(monthlyData),
                    borderColor: '#1976d2',
                    backgroundColor: 'rgba(25, 118, 210, 0.1)',
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toLocaleString();
                            }
                        }
                    }
                }
            }
        });

        // Savings Distribution Chart
        const distributionData = @Json.Serialize(Model.SavingsDistribution);
        const distributionCtx = document.getElementById('savingsDistributionChart').getContext('2d');
        new Chart(distributionCtx, {
            type: 'doughnut',
            data: {
                labels: Object.keys(distributionData),
                datasets: [{
                    data: Object.values(distributionData),
                    backgroundColor: [
                        '#4caf50',  // High Savers
                        '#2196f3',  // Medium Savers
                        '#ff9800'   // Low Savers
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom'
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const total = Object.values(distributionData).reduce((a, b) => a + b, 0);
                                const percentage = ((context.raw / total) * 100).toFixed(1);
                                return `${context.label}: ${context.raw} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    </script>
</body>
</html>